# GitHub Actions Workflow for Restock Radar
#
# This workflow automates the process of checking for Amul product stock changes.
# It runs on a schedule and can also be triggered manually.

name: 'Amul Stock Check'

on:
  # 1. Schedule: Runs automatically every 15 minutes.
  #    The cron syntax '*/15 * * * *' means "at any minute that is a multiple of 15".
  schedule:
    - cron: '*/15 * * * *'
  
  # 2. Manual Trigger: Allows you to run the workflow on-demand from the GitHub Actions UI.
  #    This is useful for testing or performing immediate checks.
  workflow_dispatch:

  # 3. Push Trigger: Runs the workflow on pushes to the main branch to validate changes.
  #    This ensures the workflow itself remains functional.
  push:
    branches:
      - main

jobs:
  check-stock:
    runs-on: ubuntu-latest
    name: 'Check Amul Stock and Send Notifications'

    steps:
      # Step 1: Check out the repository's code
      # This downloads a copy of your code to the runner.
      - name: 'Check out repository'
        uses: actions/checkout@v4

      # Step 2: Set up Java Development Kit (JDK)
      # The application requires Java 17 to build and run.
      - name: 'Set up JDK 17'
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Step 3: Cache Maven dependencies
      # This step speeds up builds by caching downloaded libraries,
      # avoiding re-downloads on every run.
      - name: 'Cache Maven packages'
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      # Step 4: Debug API Response (Temporary)
      # This step calls the Amul API directly to see its raw response.
      # This helps diagnose if the API is down or blocking GitHub's IP.
      - name: 'Debug API Response'
        run: |
          echo "Pinging Amul API to check for a direct response..."
          curl -v -H "User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Safari/605.1.15" \
          -H "Accept: application/json, text/plain, */*" \
          -H "Referer: https://shop.amul.com/" \
          "https://shop.amul.com/api/1/entity/ms.products?fields%5Bname%5D=1&fields%5Bbrand%5D=1&fields%5Bcategories%5D=1&fields%5Bcollections%5D=1&fields%5Balias%5D=1&fields%5Bsku%5D=1&fields%5Bprice%5D=1&fields%5Bcompare_price%5D=1&fields%5Boriginal_price%5D=1&fields%5Bimages%5D=1&fields%5Bmetafields%5D=1&fields%5Bdiscounts%5D=1&fields%5Bcatalog_only%5D=1&fields%5Bis_catalog%5D=1&fields%5Bseller%5D=1&fields%5Bavailable%5D=1&fields%5Binventory_quantity%5D=1&fields%5Bnet_quantity%5D=1&fields%5Bnum_reviews%5D=1&fields%5Bavg_rating%5D=1&fields%5Binventory_low_stock_quantity%5D=1&fields%5Binventory_allow_out_of_stock%5D=1&fields%5Bdefault_variant%5D=1&fields%5Bvariants%5D=1&fields%5Blp_seller_ids%5D=1&filters%5B0%5D%5Bfield%5D=categories&filters%5B0%5D%5Bvalue%5D%5B0%5D=protein&filters%5B0%5D%5Boperator%5D=in&filters%5B0%5D%5Boriginal%5D=1&facets=true&facetgroup=default_category_facet&limit=32&total=1&start=0&cdc=1m&substore=66505ff0998183e1b1935c75"

      # Step 5: Build the application
      # This compiles the Java code and creates the executable JAR file.
      - name: 'Build Application with Maven'
        run: mvn -B clean package

      # Step 6: Run the Stock Checker script
      # This is the main step that executes your application.
      # It uses GitHub Secrets to securely provide the SMTP credentials.
      - name: 'Run Stock Checker'
        env:
          # Securely inject credentials from GitHub repository secrets
          SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
        run: |
          echo "Starting the stock check process..."
          java -Dsun.net.http.allowRestrictedHeaders=true \
               -jar target/restock-radar-1.0-SNAPSHOT.jar \
               check-stock config.yml

      # Step 7: Upload last-known-stock.json as an artifact
      # This is an optional but highly recommended step for debugging.
      # It saves the state file from each run, allowing you to see what changes
      # were detected by comparing the artifacts between runs.
      - name: 'Archive stock state file'
        if: always() # This ensures the artifact is uploaded even if the previous step fails
        uses: actions/upload-artifact@v4
        with:
          name: stock-state-${{ github.run_id }}
          path: last-known-stock.json
          retention-days: 7 # Keep artifacts for 7 days 